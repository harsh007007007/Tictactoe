/* Author - Harsh Shah */
package tictactoegame;
import java.util.Random;
import java.util.Scanner;

public class Tictactoegame 
{

	public static void main(String[] args) 
        {		
		new Tictactoegame();		
	}
	public char table[] = {'1','2','3','4','5','6','7','8','9'};
	public final int BOARD_SIZE = 9;
	
        char PLAYER,COMPUTER;
        int p;
	
	public Random Ran; 
	
	public Tictactoegame() 
        {
            
		Ran = new Random(); 
				
		char turn = PLAYER;    
		int  win = 0;           
		
		decidePlayer();
                while (win == 0)
		{	
			displayBoard();

			if (turn == COMPUTER)
			{
				ComputerMove();
				turn = PLAYER;
			}
			else
			{
				UserMove();
				turn = COMPUTER;
			}	

			win = Win();
		}

		displayBoard();

		System.out.println();
		if (win == 1)
			System.out.println("It's a tie.");
		else if (win == 2)
			System.out.println(PLAYER + " wins !");
		else if (win == 3)
			System.out.println(COMPUTER + " wins !");
		else
			System.out.println("There is a logic problem!");
	}
	
	public void displayBoard()	
        {
            
            System.out.println("                            " +table[0] + " | " + table[1] + " | "  + table[2]);
            System.out.println("                            ---------");
            System.out.println("                            " +table[3] + " | " + table[4] + " | " + table[5]);
            System.out.println("                            ---------");
            System.out.println("                            " +table[6] + " | " + table[7] + " | " + table[8]);

	}
	
	
	public int Win() {
		
		// horizontal 
		for (int i = 0; i <= 6; i += 3)	
                {
			if (table[i] == PLAYER && table[i+1] == PLAYER && table[i+2]== PLAYER)
				return 2;
			if (table[i] == COMPUTER && table[i+1]== COMPUTER && table[i+2] == COMPUTER)
				return 3;
		}
	
		// vertical 
		for (int i = 0; i <= 2; i++) 
                {
			if (table[i] == PLAYER && table[i+3] == PLAYER && table[i+6]== PLAYER)
				return 2;
			if (table[i] == COMPUTER && table[i+3] == COMPUTER && table[i+6]== COMPUTER)
				return 3;
		}
	
		// diagonal 
		if ((table[0] == PLAYER && table[4] == PLAYER && table[8] == PLAYER) ||(table[2] == PLAYER && table[4] == PLAYER && table[6] == PLAYER))
			return 2;
		if ((table[0] == COMPUTER && table[4] == COMPUTER && table[8] == COMPUTER) ||(table[2] == COMPUTER && table[4] == COMPUTER && table[6] == COMPUTER))
			return 3;
	
		// tie
		for (int i = 0; i < BOARD_SIZE; i++) {
			// If we find a number, then no one has won yet
			if (table[i] != PLAYER && table[i] != COMPUTER)
				return 0;
		}
                
		return 1;
	}
        
        public void decidePlayer()
        {
            Scanner input=new Scanner(System.in);
        
                System.out.print("Enter 1 if you want x or enter 0 if you want o :");
                
                p=input.nextInt();
                
                if(p==1)
                {
                   PLAYER ='x'; 
                   COMPUTER ='O';
                   System.out.println("\nYour player is x ");
                }
                else if(p==0)
                {
                   PLAYER ='O'; 
                   COMPUTER ='X';
                   System.out.println("\nYour player is o ");
                }
                else 
                {
                    System.out.println("\nI asked you to enter 1 or 0 ");
                }
        }
	
	public void UserMove() 
	{
		
    
		Scanner s = new Scanner(System.in);
                
		int move = 0;
                if (p==1 || p==0)
                {
               
		while (move == 0) 
                {			
		
			
				while (move < 1 || move > BOARD_SIZE || 
					   table[move-1] == PLAYER || table[move-1] == COMPUTER) 
                                {
					
					if (move < 1 || move > BOARD_SIZE)
						System.out.println("\nEnter a move between 1 and " + BOARD_SIZE );
					else
						System.out.println("\nThat space is already occupied so please choose another space.");
		
					System.out.print("\nEnter your move :");
				    move = s.nextInt();
				}
			 
			
		}

		table[move-1] = PLAYER;
	}
        }
	
	public void ComputerMove() 
	{
		int move = 0;
                if (p==1 || p==0)
                {

		
		for (int i = 0; i < BOARD_SIZE; i++) 
                {
			if (table[i] != PLAYER && table[i] != COMPUTER) 
                        {
				char current = table[i];
				table[i] = COMPUTER;
				if (Win() == 3) 
                                {
					System.out.println("\nComputer is at " + (i + 1) );
					return;
				}
				else
					table[i] = current;
			}
		}

		// See if there's a move O can make to block X from winning
		for (int i = 0; i < BOARD_SIZE; i++) 
                {
			if (table[i] != PLAYER && table[i] != COMPUTER) 
                        {
				char current = table[i];   // Save the current number
				table[i] = PLAYER;
				if ( Win() == 2) 
                                {
					table[i] = COMPUTER;
					System.out.println("\nComputer is at " + (i + 1) );
					return;
				}
				else
					table[i] = current;
			}
		}

		// Generate random move
                for (int i=0;i<BOARD_SIZE;i++)
                {
                    if(move==1 || move==2 || move==3 || move==4 || move==6 || move==7 || move==8 || move==9)
                    {
                        COMPUTER= '5';
                        
                    }
                    else if (move==5)
                    {
                        COMPUTER = '1';
                    }
                }
                
		do
		{
                   			move = Ran.nextInt(BOARD_SIZE);
		} while (table[move] == PLAYER || table[move] == COMPUTER);
		
               
		System.out.print("\nComputer is at " +(move+1) +"\n");

		table[move] = COMPUTER;
	}
        }
	
}
